<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake on My Dev Blog</title>
    <link>https://ralpioxxcs.github.io/tags/cmake/</link>
    <description>Recent content in cmake on My Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Nov 2019 14:44:40 +0900</lastBuildDate>
    
	<atom:link href="https://ralpioxxcs.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CMake 정리 Part1 - Overview</title>
      <link>https://ralpioxxcs.github.io/post/cmake_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake_1/</guid>
      <description>CMake? cmake란 cross platform 기반의 프로젝트 전체 빌드 프로세스를 관리해주는 유용한 툴이다. 직접 빌드를 수행하지는 않지만 지정된 OS에 맞는 Make파일 혹은 솔루션(sln)파일의 생성을 도와주어 소스코드 빌드를 편리하게 해준다.
Cmake의 장점 (root) |- foo.cpp |- CMakeLists.txt  foo.cpp 라는 소스코드가 하나 있다고 가정하자. 이 소스코드를 각각의 다른 OS에서 빌드할 때, 윈도우즈라면 Visual Studio를, OSX라면 Xcode, Linux라면 Makefile을 이용할것이다. Cmake는 이런 귀찮은 과정을 CMakeLists.txt라는 프로젝트를 정의하는 파일을 하나 만듦으로써, 각 OS에 맞는 Build tool을 파악해 build command만 입력하면 될수 있도록 해준다.</description>
    </item>
    
    <item>
      <title>CMake 정리 Part2 - Commands &amp; Vars</title>
      <link>https://ralpioxxcs.github.io/post/cmake_2/</link>
      <pubDate>Sun, 27 Oct 2019 14:23:25 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake_2/</guid>
      <description>Overview cmake를 사용하는데 자주 사용되는 cmake명령어 및 변수들을 정리

1. project 초기 설정 CMAKE_MINIMUM_REQUIRED [용법]
cmake_minimum_required(VERSION major.minor[.patch[.tweak]][FATAL_ERROR])  만약 어떤 오픈소스 라이브러리가 cmake 3.0 버전 이상으로 작성 되었고, 현재 나의 빌드환경은 cmake 2.8버전 미만이라면 빌드 시, 다음의 에러가 출력된다 -&amp;gt; CMake 3.0 or higher is required. You are running version 2.8.12.2
이 커맨드는 반드시 CMakeListst.txt 작성시 맨 처음에 선언해놓아야 정상적인 버전 호환 에러를 출력할 수 있다.
# Bad exampleproject(foo)cmake_minimum_required(VERSION 3.</description>
    </item>
    
    <item>
      <title>CMake 정리 Part3 - Project configure</title>
      <link>https://ralpioxxcs.github.io/post/cmake_3/</link>
      <pubDate>Sun, 03 Nov 2019 14:38:36 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake_3/</guid>
      <description>0. example 어떤 프로젝트를 cmake를 이용하여 관리 및 빌드하고자 할때, CMakeLists.txt를 작성 시 자주 사용되는 cmake 기본 명령어들이 있다.
(Root) |- CMakeLists.txt |- README.md |- [src] | |- CMakeListst.txt | |- foo.cpp | |- poo.cpp | |- main.cpp |- [include] | |- foo.h | |- poo.h |- [cmake] | |- options.cmake  이런 구조를 가지는 프로젝트 폴더가 있다고 할 때, CMakeLists.txt는 아래와 같다. # [/CMakeListst.txt]cmake_minimum_required( VERSION 3.3 )project( foo CXX )# cmake fileslist( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake )include( options )# build configureset( CMAKE_BUILD_TYPE Debug )set( CMAKE_VERBOSE_MAKEFILE true )# include filesinclude_directories( ${CMAKE_CURRENT_LIST_DIR}/include)add_subdirectory( src )</description>
    </item>
    
    <item>
      <title>Cmake 정리 Par4 - Example_SDK설치</title>
      <link>https://ralpioxxcs.github.io/post/cmake_4/</link>
      <pubDate>Sun, 03 Nov 2019 14:44:40 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake_4/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>