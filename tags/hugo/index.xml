<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on My Devlog</title>
    
    
    
    <link>/tags/hugo/</link>
    <description>Recent content in Hugo on My Devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 15:21:24 +0900</lastBuildDate>
    
	<atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started Hugo [1] - 설치 및 환경설정</title>
      <link>/post/hugo/hugo_start_1_install/</link>
      <pubDate>Sat, 28 Dec 2019 14:48:40 +0900</pubDate>
      
      <guid>/post/hugo/hugo_start_1_install/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo는 웹사이트를 간편하게 만들어주는 정적 사이트 생성기 (static site generator)중 하나이며, 비슷한 생성기들 중 대표적인 예로는 **Jekyll** (지킬이라고 부른다)이 있다. 처음에는 지킬을 사용하여 블로그를 만들려했다가 단순하게 뭔가 Jekyll보다는 Hugo의 네이밍이 마음에 들어서 Hugo를 선택하여 블로그를 개설하게 되었다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [2] - 블로그 생성</title>
      <link>/post/hugo/hugo_start_2_quick_start/</link>
      <pubDate>Sat, 28 Dec 2019 15:34:07 +0900</pubDate>
      
      <guid>/post/hugo/hugo_start_2_quick_start/</guid>
      <description>
        
          
          
          
        
        
        
          이제 hugo를 이용해 사이트를 생성해볼 차례다.`c://hugo` 의 경로에서 `$ hugo new site [폴더이름]` 을 입력한다. 여기서 폴더이름은 말 그대로 터미널 상에서 접근할 폴더이름일 뿐, 생성하고자 하는 블로그의 이름이 되진 않는다. (예시는 **blog**로 하였다.) 폴더를 만들었으면 `$ cd blog &amp;&amp; ls ` 를 입력해 생성된 폴더의 내부를 확인한다. 정상적으로 생성이 되었으면 archtypes, assets, config.toml 등 여러 파일과 폴더들이 생성된 것을 확인할 수 있다. 
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [3] - 디렉터리 구조</title>
      <link>/post/hugo/hugo_start_3_directory/</link>
      <pubDate>Sat, 28 Dec 2019 14:57:28 +0900</pubDate>
      
      <guid>/post/hugo/hugo_start_3_directory/</guid>
      <description>
        
          
          
          
        
        
        
          명령창에 `$ hugo new site`를 입력하면 아래의 구조를 가진 폴더가 하나 생성되는것을 보았을것이다.각각의 폴더의 역할은 다음과 같다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [4] - 레포지토리 연동 및 웹 호스팅</title>
      <link>/post/hugo/hugo_start_4_remote_repo_link/</link>
      <pubDate>Sat, 28 Dec 2019 15:02:51 +0900</pubDate>
      
      <guid>/post/hugo/hugo_start_4_remote_repo_link/</guid>
      <description>
        
          
          
          
        
        
        
          나만의 블로그를 구축하는데 성공하였다. 이제 로컬에 저장돼있는 hugo 사이트를 github repository와 연동하여 실제로 주소를 갖는 블로그를 만들어보자. 
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [1] - Contents Path</title>
      <link>/post/hugo/hugo_content_management_1_contents_path/</link>
      <pubDate>Sat, 28 Dec 2019 15:07:19 +0900</pubDate>
      
      <guid>/post/hugo/hugo_content_management_1_contents_path/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo가 어떻게 각각에 컨텐츠에 접근하고, 폴더를 조직화하여 블로그를 구성하는지 알아보자.  
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [2] - Page Bundle</title>
      <link>/post/hugo/hugo_content_management_2_page/</link>
      <pubDate>Sun, 29 Dec 2019 15:21:24 +0900</pubDate>
      
      <guid>/post/hugo/hugo_content_management_2_page/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo에서는 [Page Bundles](https://gohugo.io/content-management/page-bundles/)이라는 개념을 사용해 컨텐츠를 관리한다.Page Bundles에는 2가지 종류가 있다.
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [3] - Front Matter</title>
      <link>/post/hugo/hugo_content_management_3_frontmatter/</link>
      <pubDate>Sat, 28 Dec 2019 16:09:14 +0900</pubDate>
      
      <guid>/post/hugo/hugo_content_management_3_frontmatter/</guid>
      <description>
        
          
          
          
        
        
        
          Front Matter? front matter란 작성하고자 하는 컨텐츠(파일)의 제목, 날짜, 작성자 등의 기본적인 속성들을 나타내는 meta-data 형식이다.  Formats Hugo는 다음 3가지의 마크업 언어를 지원한다.
 TOML : +++ YAML : --- JSON : {, }
을 이용해 front matter의 시작과 끝을 지정한다.  예를들어, a.md라는 새로운 파일을 만들었다면 --- title: &amp;#34;this is title!&amp;#34; date: 2019-12-27T13:39:03+09:00 draft: true --- this is the markdown file 이렇게 파일의 시작 부분에 front matter를 설정해주면,
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [4] - Shortcodes</title>
      <link>/post/hugo/hugo_content_management_4_shortcodes/</link>
      <pubDate>Sat, 28 Dec 2019 15:07:57 +0900</pubDate>
      
      <guid>/post/hugo/hugo_content_management_4_shortcodes/</guid>
      <description>
        
          
          
          
        
        
        
          Shortcode Hugo는 다양한 shortcode 플러그인들을 제공하고 있다. markdown이 제공하는 편리한 문법들로도 충분하지만, code snippet이나 유튜브 영상등을 추가할 때 유용하게 사용할 수 있다.
 　Shotcode 사용하기 shortcode는 { {&amp;lt; shortcodename parameters &amp;gt;} } 의 용법으로 간단하게 사용할 수 있다.
 shortcodename : 사용할 shortcode의 이름 (ex. highlight, figure..) parameter : 사용할 shortcode가 어떻게 정의되었느냐에 따라 달라짐   Built-in Shortcodes figure figure는 마크다운이 제공하는 이미지관련 문법보다 더 다양한 기능을 제공한다. parameter를 통해 첨부할 이미지의 title, caption, link등을 지정할 수 있다.
          
        
        </description>
    </item>
    
  </channel>
</rss>