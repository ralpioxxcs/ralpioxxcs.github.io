<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cpp on Devlog</title>
    <link>https://ralpioxxcs.github.io/tags/cpp/</link>
    <description>Recent content in cpp on Devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Dec 2020 19:34:14 +0900</lastBuildDate><atom:link href="https://ralpioxxcs.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>push_back vs. emplace_back</title>
      <link>https://ralpioxxcs.github.io/post/cpp/stdvector/</link>
      <pubDate>Sun, 20 Dec 2020 19:34:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cpp/stdvector/</guid>
      <description>push_back 과 emplace_back 둘 다 실질적으로 수행하는 일은 &amp;ldquo;컨테이너의 끝에 요소를 추가하는것&amp;rdquo; 로 동일하다. 하지만 두 함수를 memory allocation 관점에서 보면 emplace_back 이 훨씬 효율적으로 작동한다.
push_back 이 호출될 때 객체 관점에서 순서는 다음과 같다.
Stack 영역에 생성자를 호출 하면서 임시객체(temporary object)가 할당 된다. 복사 생성자(copy constructor) 혹은 이동 생성자 통해 함수 안에서 또 하나의 temporay object를 생성한다. 생성된 temporary object를 벡터 컨테이너의 끝에 추가한다. 1번의 임시객체가 소멸된다. 이렇게, push_back 함수는 &amp;ldquo;객체&amp;rdquo; 자체를 집어넣는 방식으로, R-value의 임시객체가 필요하다.</description>
    </item>
    
  </channel>
</rss>
