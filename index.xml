<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devlog</title>
    <link>https://ralpioxxcs.github.io/</link>
    <description>Recent content on Devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Feb 2023 21:16:42 +0900</lastBuildDate><atom:link href="https://ralpioxxcs.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>백준 1260 DFS와 BFS</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_1260/</link>
      <pubDate>Fri, 10 Feb 2023 21:16:42 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_1260/</guid>
      <description>문제 링크 문제 해결 별다른 조건이 없는 DFS, BFS 문제
입력으로 주어지는 정점은 key로 하고 각 간선들을 담는 리스트를 value로 하여 dictionary 자료형으로 구현하였다.
정석적인 방법으로 DFS는 초기 정점으로 시작하여 정점이 가지고있는 간선들을 순회하면서 재귀호출로 풀고, BFS는 간선들을 순회하면서 queue에 추가하는 방식으로 풀이하였다.
처음에 양방향의 조건을 못보고 단방향 그래프로 구현했다가 테케2번이 꼬여서 잠깐 헤맸다.
이전에 c++로 풀었던 풀이가 있어서 봤는데, 그래프를 key,value형태가 아닌 2차원 배열로 저장하여 풀었었다. 이 방법도 나중에 다시 파이썬 이중리스트로 구현해서 속도를 비교해봐야겠다.</description>
    </item>
    
    <item>
      <title>프로그래머스 카펫</title>
      <link>https://ralpioxxcs.github.io/post/ps/programmers_carpet/</link>
      <pubDate>Thu, 09 Feb 2023 23:03:22 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/programmers_carpet/</guid>
      <description>문제 링크 문제 해결 초기 접근은
너비(width)를 기준으로 1부터 최대길이까지 각 width에 맞는 height를 전부 탐색 현재 조건에서 brown + yellow = 높이 * 너비를 만족하면 정답 리턴 이런식으로 구현하였다가, 일부 케이스에서 실패 및 시간초과가 나왔다. 직사각형을 만들기 위해 리스트를 append하는 부분에서 효율적이지 못한 코드였다.
문제의 조건을 다시 보고, 특정 w,h에서 yellow와 brown이 만족하는 조건에 초점을 맞춰서 다시 구현하였다.
기존 풀이방법의 width를 기준으로 height를 순회하는 방법을 사용하되, 조건을 각 w,h일때 입력으로 주어진 brown,yellow가 되는조건을 검사하여 해결하였다.</description>
    </item>
    
    <item>
      <title>백준 1261 알고스팟</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_1261/</link>
      <pubDate>Sun, 05 Feb 2023 21:18:17 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_1261/</guid>
      <description>문제 링크 문제 해결 bfs를 이용하여 풀었다. 현재위치 (1,1)에서 맵을 탐색해 나가면서 벽이 있으면 카운팅, 없으면 계속해서 탐색한다. 단, 최소한의 갯수로 벽을 부숴 도착지로 이동해야 하므로 경로좌표를 queue에 삽입할 때, 빈 공간이 있으면 해당 좌표를 우선순위로 삽입하여 불 필요한 벽을 카운팅하는 일이 없도록 해야한다.
코드 from collections import deque # move helper mx = [0, 0, -1, 1] my = [1, -1, 0, 0] def check_range(x, y: int): return x &amp;lt; m and y &amp;lt; n and x &amp;gt;= 0 and y &amp;gt;= 0 def solve(): paths = deque() paths.</description>
    </item>
    
    <item>
      <title>백준 1038 감소하는 수</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_1038/</link>
      <pubDate>Sun, 05 Feb 2023 16:16:42 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_1038/</guid>
      <description>문제 링크 문제 해결 N번째 감소하는 수가 몇인지 출력하는 문제, N은 최대 100만까지 입력된다.
간단하게 0부터 987654321까지 감소하는 수인지 판별하는것은 시간초과가 나오므로, 감소하는 수의 특성을 이용하여 풀어야한다.
감소하는 수는 955같이 중복이 나오면 안되고 맨 앞자리의 수에 의해 나머지가 결정된다. 예를들어 특정 감소하는 수가 5로 시작된다면 나머지는 반드시 {1,2,3,4}의 조합으로 이루어져야 한다. 이런 성질을 이용해서 1부터 10까지 대표 앞자리를 설정한 후 각 앞자리마다 파생되는 나머지 숫자들을 조합하면 된다.
1 10 21 -&amp;gt; 210 -&amp;gt; 20 -&amp;gt; 20 32 -&amp;gt; 321 -&amp;gt; 3210 -&amp;gt; 320 31 -&amp;gt; 310 30 43 -&amp;gt; 432 -&amp;gt; 4321 -&amp;gt; 43210 -&amp;gt; 431 -&amp;gt; 430 .</description>
    </item>
    
    <item>
      <title>백준 9328 열쇠</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_9328/</link>
      <pubDate>Sun, 05 Feb 2023 14:35:42 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_9328/</guid>
      <description>문제 링크 문제 해결 맵에 있는 탐색 가능한 모든 문서의 갯수를 찾는 문제로, BFS를 이용하여 풀었다. 특이한 점은 주어진 열쇠로 맵에 있는 문을 열어서 이동할 수 가 있다는것인데, 열쇠를 맵을 탐색하면서 추가적으로 획득할 수 있기 때문에 이 부분을 유의하여 풀어야 한다.
입력 for _ in range(int(input())): height, width = map(int, input().split()) floor = [list(input()) for _ in range(height)] keys = set(input()) visited = [[0 for _ in row] for row in floor] documents = 0 doors = {} # 열리지 않은 문 리스트 for door in &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;: doors.</description>
    </item>
    
    <item>
      <title>GStreamer 사용하기 [2] - 어플리케이션 만들기</title>
      <link>https://ralpioxxcs.github.io/post/gstreamer/1_gst/</link>
      <pubDate>Wed, 02 Nov 2022 23:35:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/gstreamer/1_gst/</guid>
      <description>gst-launch를 사용하여 커맨드라인으로 원하는 파이프라인을 실행시킬 수도 있지만, GStreamer API 구성 요소를 사용하여 명령줄로 구현했던 파이프라인의 기능을 똑같이 동작시키는 하나의 응용 어플리케이션 형태로도 만들수 있다.
GStreamer는 기본적으로 GLib의 GObject를 기반으로 설계되었기 때문에 GObject의 개념을 어느정도 이해하고 있어야 GStreamer를 다루는데 능숙해지지만, 이는 plugin을 만들거나 단순 기능을 사용하는것이 아닌 스케줄링, 동기화등의 비교적 고급 기능을 사용하려고나 할때 중요한 것이다. 공식 문서에 올라와있는 예제 코드를 살펴보자.
아래 코드는 GStreamer 플러그인중 state of the art로 여겨지는 playbin을 실행시키는 예제이다.</description>
    </item>
    
    <item>
      <title>GStreamer 사용하기 [1] - 파이프라인 구성요소 및 개념</title>
      <link>https://ralpioxxcs.github.io/post/gstreamer/0_gst/</link>
      <pubDate>Wed, 02 Nov 2022 22:15:21 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/gstreamer/0_gst/</guid>
      <description>최근에 멀티미디어 관련 프로젝트를 진행하면서 GStreamer를 사용할 일이 생겼다. 간단하게 사용하기에는 알아야할 것들이나 개념들이 꽤나 많기 때문에 GStreamer를 사용하면서 정리한 내용들 및 추가적으로 학습한 내용들을 포스팅할 예정이다.
GStreamer gstreamer overview Gstreamer는 스트리밍 미디어 어플리케이션 생성을 위한 통합 미디어 프레임워크로, 수많은 모듈형식으로 구성된 멀티미디어 프레임워크이다. 주로 오디오, 비디오 스트림등 다양한 데이터 프로토콜의 흐름을 설계할 수 있도록 도와준다. 예를들어 어떤 영상 파일을 rtsp클라이언트를(ex. VLC)이용해서 접근할 수 있도록 rtp 데이터 스트림을 생성하는 rtsp서버를 간단하게 구현할 수 있게 해준다.</description>
    </item>
    
    <item>
      <title>aarch64 크로스 컴파일 환경 구성하기</title>
      <link>https://ralpioxxcs.github.io/post/etc/cross_compilation_arm/</link>
      <pubDate>Wed, 06 Jul 2022 23:19:44 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/cross_compilation_arm/</guid>
      <description>애플에서 M1 프로세서를 출시하고 나서부터 ARM 아키텍처가 각광받고 있지만, 보통 ARM 아키텍처를 사용하는 환경은 저전력, 제한된 리소스를 사용하기 때문에 쾌적한 빌드환경을 갖추기가 어렵다. 보통은 이러한 제한때문에 대부분의 개발 작업을 x86환경에서 크로스 컴파일을 사용해 타겟 아키텍처에서 실행가능한 형태로 빌드한다.
회사에서 raspberry PI 혹은 nvidia jetson 보드를 이용해 신제품을 프로토타이핑 하는 경우가 잦았는데, 타겟 보드에서 테스트를 하려고 할 때마다 빌드 시간이 너무 느려 답답한 경우가 많았다. 그래서 크로스 컴파일 환경을 한번 갖춰놓으니 빌드 시간도 단축시킬 수 있었고, CI 서버에도 크로스 컴파일 자동화를 적용하여 전체적인 개발 속도를 높일 수 있었다.</description>
    </item>
    
    <item>
      <title>Golang Logrus Hook을 이용한 mutisink 로깅</title>
      <link>https://ralpioxxcs.github.io/post/etc/logging/</link>
      <pubDate>Tue, 07 Jun 2022 22:36:04 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/logging/</guid>
      <description>Logrus? golang에서 사용하는 대표적인 logging 패키지인 logrus는 stdout, stderr등 다양한 output 및 커스터마이징이 가능한 formatter등 구조화된 로깅을 지원한다.
구조화된(structured) 로깅? 로그를 단순한 텍스트의 연속이 아닌 특정 데이터 세트(날짜, 사용자, 각종 필드)로 처리할 수 있도록 특정한 메시지 포맷을 구현하는 방식이다.
기본 사용법 간단하게 콘솔창에 로그를 찍는 예제는 다음과 같다
package main import ( &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; log &amp;#34;github.com/sirupsen/logrus&amp;#34; ) func main() { log.SetOutput(os.Stdout) log.SetFormatter(&amp;amp;log.TextFormatter{ FullTimestamp: true, TimestampFormat: time.RFC822, }) log.SetLevel(log.InfoLevel) log.Info(&amp;#34;Info message&amp;#34;) log.</description>
    </item>
    
    <item>
      <title>카메라 캘리브레이션 - 좌표변환</title>
      <link>https://ralpioxxcs.github.io/post/etc/camera_calibration_2/</link>
      <pubDate>Tue, 05 Apr 2022 23:46:57 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/camera_calibration_2/</guid>
      <description>좌표 정규화 투영
카메라 parameter를 알고 있다고 가정하고, normalized 좌표는 다음 계산식을 통해 영상 좌표로 변환된다.
$$ x_{img} = x_{norm}*f_x + c_x \newline y_{img} = y_{norm}*f_y + c_y $$
반대로, 식을 바꿔 image plane 좌표 또한 normalized 좌표로 변환될 수 있다.
$$ x_{norm} = (x_{img}-c_x)/f_x \newline y_{norm} = (y_{img}-c_y)/f_y $$
fx, fy는 focal length, 초점거리, cx,cy는 principal point 즉, 주점이라고 부른다. 이 요소들을 3x3 행렬로 만든것을 camera matrix 혹은 intrinsic paramter라고 한다.</description>
    </item>
    
    <item>
      <title>카메라 캘리브레이션 - 좌표계</title>
      <link>https://ralpioxxcs.github.io/post/etc/camera_calibration_1/</link>
      <pubDate>Tue, 05 Apr 2022 23:30:57 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/camera_calibration_1/</guid>
      <description>카메라 캘리브레이션 3차원의 장면이 카메라를 통해 2차원의 평면으로 구현될 때, 각각의 3차원 상의 점들은 카메라의 위치, 방향 같은 기하학적인 요소와 이미지 센서의 초점 거리, 렌즈의 왜곡 등 여러 내부적인 요소(parameters) 들에 의해 결정된다. 이 내부 요소들을 통해 렌즈의 왜곡, 3D상의 물체에 대한 크기 및 면적, 카메라의 위치등을 계산할 수 있으며, 이 값들을 구하는 과정을 카메라 캘리브레이션 이라고 부른다.
좌표계 좌표계
카메라 캘리브레이션에서는 주로 4가지의 좌표계가 사용된다
월드 좌표계 (3D) 픽셀 좌표계 정규 좌표계 카메라 좌표계 월드 좌표계 사물의 위치를 나타내는 좌표계로 3차원(X,Y,Z)을 사용하는 좌표계이다.</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; &lt;-&gt; Go 콜백함수 구현하기</title>
      <link>https://ralpioxxcs.github.io/post/etc/cgo_callback/</link>
      <pubDate>Mon, 22 Nov 2021 23:46:11 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/cgo_callback/</guid>
      <description>Cgo Cgo는 Go에서 C언어를 사용할 수 있게해주는 Go의 feature중 하나이다. 이 기능을 이용해 C언어와 Go언어사이의 콜백함수를 만들어 볼 것이다. 주의할 점은 Cgo에서 읽을 수 있는것은 C스타일의 심볼을 갖는 함수 뿐이다. 순수 C언어로만 작성된 라이브러리라면 문제가 없겠지만 C++ 베이스의 함수를 이용하고 싶기 때문에 해당 함수를 한번 wrapping해주는 형태로 만들어 볼 것이다
기본 사용법 함수를 wrapping 해보기 전, 기본적인 사용법을 다시 보자
package main /* #include &amp;lt;stdio.h&amp;gt; void CFoo() { printf(&amp;#34;Hello from C\n&amp;#34;); } */ import &amp;#34;C&amp;#34; import &amp;#34;fmt&amp;#34; func main() { fmt.</description>
    </item>
    
    <item>
      <title>쉘 스크립트 삽질</title>
      <link>https://ralpioxxcs.github.io/post/etc/double_vs_single_quote/</link>
      <pubDate>Mon, 27 Sep 2021 20:32:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/double_vs_single_quote/</guid>
      <description>배경 최근에 간단한 쉘 스크립트 하나를 짜면서 겪은 문제가 하나 있다. ssh로 연결된 특정 보드의 이더넷 네트워크 인터페이스의 설정을 변경해주는 작업이었다. 적용할 보드가 한두개가 아니라서 해당 작업을 간편하게 하기위해서 HOST(노트북)에서 해당 작업을 수행하는 스크립트를 실행시키면 ssh를 통해 보드내 설정을 바꿔주도록 했다. 딱히 어려울것 없는 작업이라 sshpass, scp, ssh, sed 명령어 조합을 사용하였다.
로컬 터미널에서 위의 명령어들을 쓰면서 잘 바뀌는것을 확인했고 그 로직을 그대로 쉘 스크립트를 작성하였다&amp;hellip; 하지만 문제는 로컬 터미널에서만 테스트 한 점이었다.</description>
    </item>
    
    <item>
      <title>WSL2 메모리 사용량 조절</title>
      <link>https://ralpioxxcs.github.io/post/etc/wsl_config/</link>
      <pubDate>Sun, 21 Feb 2021 23:16:05 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/wsl_config/</guid>
      <description>WSL 메모리 사용량 wsl2을 사용하다가 메모리 사용량을 체크 해보면 Vmmem 이라는 놈이 메모리를 엄청 잡아먹고 있는걸 볼 수있다. 마소 공식 document에 따르면 총 메모리의 50퍼센트 혹은 특정 빌드 전 단계에서는 총 메모리의 무려 80퍼센트를 사용한다고 한다.
50% of total memory on Windows or 8GB, whichever is less; on builds before 20175: 80% of your total memory on Windows
config 파일 작성 다행히도 .wslconfig라는 파일을 사용해서 WSL 설정을 바꿀 수 있다. 아래는 설정 파일의 예시이다.</description>
    </item>
    
    <item>
      <title>push_back vs. emplace_back</title>
      <link>https://ralpioxxcs.github.io/post/cpp/stdvector/</link>
      <pubDate>Sun, 20 Dec 2020 19:34:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cpp/stdvector/</guid>
      <description>push_back 과 emplace_back 둘 다 실질적으로 수행하는 일은 &amp;ldquo;컨테이너의 끝에 요소를 추가하는것&amp;rdquo; 로 동일하다. 하지만 두 함수를 memory allocation 관점에서 보면 emplace_back 이 훨씬 효율적으로 작동한다.
push_back 이 호출될 때 객체 관점에서 순서는 다음과 같다.
Stack 영역에 생성자를 호출 하면서 임시객체(temporary object)가 할당 된다. 복사 생성자(copy constructor) 혹은 이동 생성자 통해 함수 안에서 또 하나의 temporay object를 생성한다. 생성된 temporary object를 벡터 컨테이너의 끝에 추가한다. 1번의 임시객체가 소멸된다. 이렇게, push_back 함수는 &amp;ldquo;객체&amp;rdquo; 자체를 집어넣는 방식으로, R-value의 임시객체가 필요하다.</description>
    </item>
    
    <item>
      <title>Vim 사용하기 #3 - C/C&#43;&#43; 개발환경 세팅</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_3/</link>
      <pubDate>Fri, 11 Dec 2020 20:13:41 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_3/</guid>
      <description>이번에는 neovim에서 coc.nvim를 이용하여 C/C++ 개발환경을 세팅하는 방법에 대해서 알아보겠다.
coc.nvim은 Language Server Protocol인 LSP를 지원하는 코드 auto-completion 패키지인데 이전에는 ycm을 사용하다가 너무 무겁기도 하고 개인적으로 환경설정 부분에 불편함 점이 있어 coc.nvim을 사용하게 되었다.
coc.nvim 설치 vim-plug 설정부분에 아래를 추가해준뒤, :PlugInstall을 해준다.
Plug &amp;#39;neoclide/coc.nvim&amp;#39;, {&amp;#39;tag&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;do&amp;#39;: &amp;#39;./install.sh&amp;#39;} 참고로, node.js 10.12 버전 이상이 설치되어있어야 한다. node.js가 설치되어있지 않다면 여기를 참고하여 다운로드 및 설치를 진행해주자.
cpp language server 설치 이곳을 보면 C/C++ language server에 맞는 configuration example을 제공한다.</description>
    </item>
    
    <item>
      <title>multitail을 이용한 로그 모니터링</title>
      <link>https://ralpioxxcs.github.io/post/etc/log_monitoring/</link>
      <pubDate>Fri, 09 Oct 2020 20:56:41 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/log_monitoring/</guid>
      <description>보통 로그파일 실시간으로 보고싶을때 tail 명령어를 사용한다. 하지만 여러 로그를 보고싶을때는 tmux등 화면 분할을 해서 봐야하는데 이 방법은 귀찮다. 이럴때 multitail을 사용하면 간단하게 여러 로그를 모니터링할수 있다.
설치 apt install multitail을 입력하여 간단하게 설치한다. 맥 유저라면 brew install multitai을 쓴다.
사용법 1개의 파일 모니터링
multitail [filename]
2개의 파일 모니터링 (가로로 분할)
multitail [filename] [filename] 2개의 파일 모니터링 (세로로 분할)
multitail -s 2 [filename] [filename] colorscheme 설정 multitail은 자체 config파일을 통해 로그파일 highlighting을 지원한다.</description>
    </item>
    
    <item>
      <title>백준 1026 보물</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_1026/</link>
      <pubDate>Sun, 04 Oct 2020 15:49:50 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_1026/</guid>
      <description>문제 링크 문제 해결 단순 정렬 문제, 각 배열 원소들의 곱 S가 최솟값이 나와야하므로, 큰 수와 작은 수 끼리 곱해주면 된다.
A는 오름차순 정렬, B는 내림차순 정렬을 한 뒤, 반복문을 이용하여 해결
Code a = [] b = [] n = int(input()) a = list(map(int, input().split())) b = list(map(int, input().split())) a = sorted(a, reverse=True) b = sorted(b) sum = 0 for i in range(n): sum += a[i] * b[i] print(sum) </description>
    </item>
    
    <item>
      <title>백준 10815 숫자카드</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_10815/</link>
      <pubDate>Sun, 04 Oct 2020 15:49:50 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_10815/</guid>
      <description>문제 링크 문제 해결 정수 M개의 입력이 50만개이기때문에 단순 순차 탐색으로는 시간초과가 나온다. 숫자 카드 배열을 먼저 정렬한 후 binary search를 이용하여 해결하였다.
Code # binary search def search(key, left, right): mid = (left + right) // 2 # 종료 조건 if cards[mid] == key: return True if left &amp;gt; right: return False if key &amp;gt; cards[mid]: return search(key, mid+1, right) elif key &amp;lt; cards[mid]: return search(key, left, mid-1) n = int(input()) cards = sorted(list(map(int, input().</description>
    </item>
    
    <item>
      <title>백준 7576 토마토</title>
      <link>https://ralpioxxcs.github.io/post/ps/boj_7576/</link>
      <pubDate>Sun, 04 Oct 2020 15:49:50 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/ps/boj_7576/</guid>
      <description>입력 : 세로 크기 N, 가로 크기 M ( 2 &amp;lt;= M,N &amp;lt;= 1,000 )
1 = 익은 토마토 0 = 익지 않은 토마토 -1 = 토마토가 들어있지 않은 칸 출력 : 토마토가 모두 익을 때까지의 최소 날짜 출력
저장될 때부터 모든 토마토가 익었다면 0 모두 익지 못하는 상황이면 -1 문제 해결 입력을 받으면서 익은토마토의 위치를 큐에 PUSH하고 (BFS를사용), 안 익은 토마토의 갯수를 저장한다.
안익은 토마토가 없다면 모두 익은것이므로 0을 출력하고 끝낸다.</description>
    </item>
    
    <item>
      <title>SSH 서버 설정</title>
      <link>https://ralpioxxcs.github.io/post/etc/sshd_config/</link>
      <pubDate>Tue, 29 Sep 2020 19:54:24 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/sshd_config/</guid>
      <description>SSH 시큐어 셸(Secure SHell, SSH)은 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해 주는 응용 프로그램 또는 그 프로토콜을 가리킨다. 기존의 rsh, rlogin, 텔넷 등을 대체하기 위해 설계되었으며, 강력한 인증 방법 및 안전하지 못한 네트워크에서 안전하게 통신을 할 수 있는 기능을 제공한다. -Wiki
리눅스 개발환경을 구성하다보면 거의 필수적으로 사용하게 되는 ssh(secure shell) 을 구성하는 방법을 알아보자.
SSH 서버 설치 ubuntu 및 osx 에는 기본적으로 ssh client는 설치돼있다.</description>
    </item>
    
    <item>
      <title>Vim 사용하기 #2 - Plugin</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_2/</link>
      <pubDate>Fri, 07 Aug 2020 14:26:52 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_2/</guid>
      <description>Vim Plugins vim을 쓰는 가장 큰 이유중 하나는 바로 이 Plugin에 있지않나 싶다. 설치도 비교적 간편하며, 확장성이 뛰어나서 플러그인을 사용하면서 불편한 부분들을 설정파일을 통해 입맛에 맞게 바꿀 수 있다는 점이 매력적이다.
지금도 유용하게 사용하는 vim 플러그인들에 대한 소개와 설치방법 및 사용법에 대해 간단히 알아보겠다.
플러그인 매니저 설치 vim에서 Plugin들을 설치, 관리해주는 도구들이 여러개 있는데 (Vundle, Pathogen) 그 중에서 나는 junegunn님이 만드신 vim-plug를 사용중이다.
현재 neovim을 사용중이므로 설치 방법은 아래와 같다.</description>
    </item>
    
    <item>
      <title>Ubuntu LLVM Package 설치</title>
      <link>https://ralpioxxcs.github.io/post/etc/llvm_install/</link>
      <pubDate>Sat, 04 Jul 2020 13:53:55 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/llvm_install/</guid>
      <description>이 링크 로 들어가면 아래 사진과 같은 화면이 나오며 각 Release 버전에 맞는 llvm 패키지들을 다운로드 받을 수 있다. llvm, clang, lld, lldb등 각 패키지에 대한 설명은 여기에 잘 나와있다.
아무튼 위의 사진에 나온것처럼 설치방법으로는 크게 4가지로 나눌 수 있다.
소스코드 다운로드 후 직접 빌드 미리 빌드된 바이너리 설치 Automatic Installation Script apt install 커맨드 사용하여 설치 이 포스팅에서는 3번째인 Automatic installation script를 이용하여 설치하는 방법을 다루려고 한다.
Automatic installation script llvm에서는 llvm 저장소와 apt insatll 커맨드를 간편하게 하나의 스크립트로 설치 해주는 Automactic installation script를 제공하여 간편하게 llvm package들을 다운로드 받을 수 있다.</description>
    </item>
    
    <item>
      <title>Ubuntu Clang 컴파일러 설정</title>
      <link>https://ralpioxxcs.github.io/post/etc/change_compiler/</link>
      <pubDate>Sat, 04 Jul 2020 13:32:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/change_compiler/</guid>
      <description>ubuntu 환경에서 c,cxx 기본 컴파일러는 /usr/bin/cc , /usr/bin/c++에 심볼릭 링크로 지정되어있는데 기본적으로는 gcc와 **g++**로 설정되어있다.
빌드시에 컴파일러 경로를 직접 입력해주는 방법도 있지만, /usr/bin/c++의 심볼릭 링크를 변경해줌으로써 고정을 시킬수도 있다.
이 과정전에 반드시 clang이 설치되어야 한다. clang을 설치하는 방법은 여기에 포스팅해 두었다.
환경변수 변경 export CC=/usr/bin/clang export CXX=/usr/bin/clang++ 위의 명령어로 환경변수를 바꿔주는 방법으로 컴파일러를 바꿔줄 수 있다. 영구적으로 지정시키고 싶다면 ~/.bashrc에 추가하는 방법으로 환경변수를 설정해주하면 된다.
지정 커맨드 이용 # c++ compiler sudo update-alternatives --config c++ # c compiler sudo update-alternatives --config cc 위의 커맨드를 입력하고 아래처럼 결과 창이 나오면 원하는 번호를 입력하여 c와 c++에 지정된 컴파일러 경로를 바꿔준다.</description>
    </item>
    
    <item>
      <title>Vim 사용하기 #1 - Install</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_1/</link>
      <pubDate>Fri, 19 Jun 2020 21:06:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_1/</guid>
      <description>나에게 vim이란 라즈베리파이 같은 리소스나 메모리등 작업 환경이 열악하거나 불가피한 사유로 인터넷을 사용하지 못하는 상황에서 가끔 쓰던 편집기였다.
hjkl로 움직이고, visual mode, normal mode 등등 처음에는 진입장벽이 높게 느껴져서 손이 안가다가, 마우스를 쓰는게 너무 귀찮아서 일주일만 마음먹고 연습(?)을 했더니 이제는 vim이 없으면 코딩을 할 맛이 안나게 될 정도로 익숙해져버렸다.
vim으로 갈아타게 된 결정적인 계기는 VSCode에서 지원하는 c/cpp extension이 메모리를 너무 잡아먹어서이다.. (물론 vim도 이것저것 많이 깔면 느려지겠지만)
아무튼 내가 생각하는 vim의 장점은 이렇다</description>
    </item>
    
    <item>
      <title>gdb에서 imagewatch 사용하기</title>
      <link>https://ralpioxxcs.github.io/post/etc/gdb_imagewatch_1/</link>
      <pubDate>Sat, 25 Apr 2020 15:21:05 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/gdb_imagewatch_1/</guid>
      <description>OpenCV 라이브러리를 사용해본 사람이라면 한번쯤 ImageWatch 플러그인을 사용해봤을 것이다.
디버거에서 확인하기 힘든 Mat 데이터내 index value등 간편한 인터페이스를 통해 직관적으로 확인이 가능한 유용한 툴이다. 하지만, Visual Studio에서만 사용이 가능한 플러그인이라, 리눅스 환경에서 개발을 하는 나에게는 아쉬움이 많았다.
그러다가 github에서 imagewatch와 비슷하게 간편한 인터페이스로 index값을 확인할 수 있는 프로그램을 발견하게 되었고, 지금까지 아주 유용하게 사용하고 있다.
설치조건 gdb imagewatch는 아래의 프로그램들의 설치를 필요로 한다.
OpenGL 2.1++ C+11 컴파일러 gdb 7.10 버전 이상 Qt 5.</description>
    </item>
    
    <item>
      <title>CMake Part4 - 색상 지정</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_4/</link>
      <pubDate>Sat, 01 Feb 2020 15:32:40 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_4/</guid>
      <description>set 변수를 사용해 Shell에 출력되는 문자들의 색상을 지정할 수 있다.
if(NOT WIN32) string(ASCII 27 Esc) set(ColourReset &amp;#34;${Esc}[m&amp;#34;) set(ColourBold &amp;#34;${Esc}[1m&amp;#34;) set(Red &amp;#34;${Esc}[31m&amp;#34;) set(Green &amp;#34;${Esc}[32m&amp;#34;) set(Yellow &amp;#34;${Esc}]33m&amp;#34;) set(Blue &amp;#34;${Esc}]34&amp;#34;) set(Magenta &amp;#34;${Esc}]35m&amp;#34;) set(Cyan &amp;#34;${Esc}]36m&amp;#34;) set(White &amp;#34;${Esc}[37m&amp;#34;) set(BoldRed &amp;#34;${Esc}[1;31m&amp;#34;) set(BoldGreen &amp;#34;${Esc}[1;32m&amp;#34;) set(BoldYellow &amp;#34;${Esc}[1;33m&amp;#34;) set(BoldBlue &amp;#34;${Esc}[1;34m&amp;#34;) set(BoldMagenta &amp;#34;${Esc}[1;35m&amp;#34;) set(BoldCyan &amp;#34;${Esc}[1;36m&amp;#34;) set(BoldWhite &amp;#34;${Esc}[1;37m&amp;#34;) endif() 위의 내용을 .cmkae파일로 만들어 include하거나 CmakeLists.txt 의 상단에 삽입한다.
Example message(&amp;#34; &amp;#34;) message( &amp;#34;${BoldGreen}\t\t\t[ BUILD SUMMARY ] ${White}&amp;#34; ) message( &amp;#34;${BoldWhite}------------------------------------------------------------------------${ColourReset}&amp;#34; </description>
    </item>
    
    <item>
      <title>CMake Part3 - 프로젝트 구성</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_3/</link>
      <pubDate>Thu, 30 Jan 2020 14:38:36 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_3/</guid>
      <description>어떤 프로젝트를 cmake를 이용하여 관리 및 빌드하고자 할때, CMakeLists.txt를작성 시 자주 사용되는 cmake 기본 명령어들이 있다.
(Root) |- CMakeLists.txt |- README.md |- [src] | |- CMakeListst.txt | |- foo.cpp | |- poo.cpp | |- main.cpp |- [include] | |- foo.h | |- poo.h |- [cmake] | |- options.cmake 이런 구조를 가지는 프로젝트 폴더가 있다고 할 때, CMakeLists.txt는 아래와 같다.
# [/CMakeListst.txt] cmake_minimum_required(VERSION 3.3) project(foo CXX) # -&amp;gt; &amp;#39;foo&amp;#39;라는 project를 정의한다. # cmake files list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake) include(options) # -&amp;gt; project 설정관련 전반 .</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ralpioxxcs.github.io/about/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/about/</guid>
      <description>Hi! 😀 My name is JaeHong Kim.
I work as a Software Engineer on an IT Compnay from Korea.
I focus on Image processing Development.
Programming as a craftsmanship is my main hobby, learning something new keeps me motivated.
Also, I love to build keyboards.
I made this blog to improve my development skills and career.</description>
    </item>
    
    <item>
      <title>CMake Part2 - Commands &amp; Vars</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_2/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_2/</guid>
      <description>1. project 초기 설정 CMAKE_MINIMUM_REQUIRED [용법]
cmake_minimum_required(VERSION major.minor[.patch[.tweak]][FATAL_ERROR]) 만약 어떤 오픈소스 라이브러리가 cmake 3.0 버전 이상으로 작성 되었고, 현재 나의 빌드환경은 cmake 2.8버전 미만이라면 빌드 시, 다음의 에러가 출력된다 -&amp;gt;
CMake 3.0 or higher is required. You are running version 2.8.12.2
이 커맨드는 반드시 CMakeListst.txt 작성시 맨 처음에 선언 해 놓아야 정상적인 버전 호환 에러를 출력할 수 있다.
# Bad example project(foo) cmake_minimum_required(VERSION 3.0) message(&amp;#34;Using CMake version ${CMAKE_VERSION}&amp;#34;) PROJECT [용법]</description>
    </item>
    
    <item>
      <title>CMake Part1 - Overview</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_1/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_1/</guid>
      <description>CMake? cmake란 cross platform 기반의 프로젝트 전체 빌드 프로세스를 관리해주는 유용한 툴이다. 직접 빌드를 수행하지는 않지만 지정된 OS에 맞는 Make파일 혹은 **솔루션(sln)**파일의 생성을 도와주어 소스코드 빌드를 편리하게 해준다.
Cmake의 장점 (root) |- foo.cpp |- CMakeLists.txt foo.cpp 라는 소스코드가 하나 있다고 가정하자. 이 소스코드를 각각의 다른 OS에서 빌드할 때, 윈도우즈라면 Visual Studio를, OSX라면 Xcode, Linux라면 Makefile을 이용할것이다. Cmake는 이런 귀찮은 과정을 CMakeLists.txt라는 프로젝트를 정의하는 파일을 하나 만듦으로써, 각 OS에 맞는 Build tool을 파악해 build command만 입력하면 될수 있도록 해준다.</description>
    </item>
    
    <item>
      <title>Hugo Content Management [4] - Shortcodes</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_4_shortcodes/</link>
      <pubDate>Mon, 30 Dec 2019 18:07:57 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_4_shortcodes/</guid>
      <description>Shortcode Hugo는 다양한 shortcode 플러그인들을 제공하고 있다. markdown이 제공하는 편리한 문법들로도 충분하지만, code snippet이나 유튜브 영상등을 추가할 때 유용하게 사용할 수 있다.
Shotcode 사용하기 shortcode는 { {&amp;lt; shortcodename parameters &amp;gt;} } 의 용법으로 간단하게 사용할 수 있다.
shortcodename : 사용할 shortcode의 이름 (ex. highlight, figure..) parameter : 사용할 shortcode가 어떻게 정의되었느냐에 따라 달라짐 Built-in Shortcodes figure figure는 마크다운이 제공하는 이미지관련 문법보다 더 다양한 기능을 제공한다. parameter를 통해 첨부할 이미지의 title, caption, link등을 지정할 수 있다.</description>
    </item>
    
    <item>
      <title>Hugo Content Management [3] - Front Matter</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_3_frontmatter/</link>
      <pubDate>Mon, 30 Dec 2019 16:09:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_3_frontmatter/</guid>
      <description>Front Matter? front matter란 작성하고자 하는 컨텐츠(파일)의 제목, 날짜, 작성자 등의 기본적인 속성들을 나타내는 meta-data 형식이다. Formats Hugo는 다음 3가지의 마크업 언어를 지원한다.
TOML : +++ YAML : --- JSON : {, }
을 이용해 front matter의 시작과 끝을 지정한다. 예를들어, a.md라는 새로운 파일을 만들었다면 --- title: &amp;#34;this is title!&amp;#34; date: 2019-12-27T13:39:03+09:00 draft: true --- this is the markdown file 이렇게 파일의 시작 부분에 front matter를 설정해주면,
위처럼 front matter에 설정한대로, title과 date가 입력이된것을 볼수있다.</description>
    </item>
    
    <item>
      <title>Hugo Content Management [2] - Page Bundle</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_2_page/</link>
      <pubDate>Mon, 30 Dec 2019 15:21:24 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_2_page/</guid>
      <description>Hugo에서는 Page Bundles이라는 개념을 사용해 컨텐츠를 관리한다. Page Bundles에는 2가지 종류가 있다.
Leaf Bundle Branch Bundle Left Bundle left bundle은 단독 페이지를 구성하는데 사용되고, index.md 파일을 포함하는 폴더로 구성된다.
3 of Leaf Bundle Example content/ ├── project │ ├── index.md ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ | ├── image1.png │ | └── index.md │ └── study │ ├── first.md │ └── second.md │ └── index.</description>
    </item>
    
    <item>
      <title>Hugo Content Management [1] - Contents Path</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_1_contents_path/</link>
      <pubDate>Mon, 30 Dec 2019 15:07:19 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_1_contents_path/</guid>
      <description>Hugo가 어떻게 각각에 컨텐츠에 접근하고, 폴더를 조직화하여 블로그를 구성하는지 알아보자.
컨텐츠 구성 (root) └── content └── project | └── index.md // &amp;lt;- https://example.com/project/ ├── posts | ├── firstpost.md // &amp;lt;- https://example.com/posts/firstpost/ | └── secondpost.md // &amp;lt;- https://example.com/posts/secondpost/ └── study ├── first.md // &amp;lt;- https://example.com/study/first/ └── second.md // &amp;lt;- https://example.com/study/second/ 위 처럼 각각 project, posts, study 총 3개의 카테고리가 있다고 가정할 때, Hugo는 section, slug, path, url의 변수들을 이용해 컨텐츠를 관리한다.</description>
    </item>
    
    <item>
      <title>Getting Started Hugo [4] - 레포지토리 연동 및 웹 호스팅</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_4_remote_repo_link/</link>
      <pubDate>Sun, 29 Dec 2019 15:02:51 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_4_remote_repo_link/</guid>
      <description>나만의 블로그를 구축하는데 성공하였다. 이제 로컬에 저장돼있는 hugo 사이트를 github repository와 연동하여 실제로 주소를 갖는 블로그를 만들어보자.
Step 1. github repository 생성 github에 로그인하여 총 2개의 repository를 생성한다.
blog 폴더 자체를 저장할 repository hugo로 빌드된 결과파일들을 저장할 repository
두번째 repository의 이름은 [github계정명].github.io의 형식으로 만들어야 한다. remote repository 연동 c://hugo/blog 경로에서 $ git init .으로 로컬 repository를 생성한다. $ git remote add origin [첫번째 repository url]를 입력한다. $ git submodule add -b master [두번째 repository url] public을 입력하여 hugo로 빌드될 public폴더를 서브모듈로 연결한다.</description>
    </item>
    
    <item>
      <title>Getting Started Hugo [3] - 디렉터리 구조</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_3_directory/</link>
      <pubDate>Sun, 29 Dec 2019 14:57:28 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_3_directory/</guid>
      <description>명령창에 $ hugo new site를 입력하면 아래의 구조를 가진 폴더가 하나 생성되는것을 보았을것이다. 각각의 폴더의 역할은 다음과 같다.
( root ) ├─ archetypes ├─ content ├─ data ├─ layouts ├─ static ├─ themes ├─ config.toml archetypes $ hugo new 커맨드를 이용해 새로운 contents 파일을 만들때, 이 폴더내의 default.md 의 front matter 형태를 갖는 content를 자동으로 초기화 하여 만들어준다. 많은양의 content를 만들 때 유용하게 사용될수 있고, front matter field를 직접 수정하여 하나의 archtypes로 만들 수 있다.</description>
    </item>
    
    <item>
      <title>Getting Started Hugo [2] - 블로그 생성</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_2_quick_start/</link>
      <pubDate>Sat, 28 Dec 2019 15:34:07 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_2_quick_start/</guid>
      <description>Let&amp;rsquo;s create own blog Step 1. 블로그 폴더 생성 c://hugo 의 경로에서 $ hugo new site [폴더이름] 을 입력한다. 여기서 폴더이름은 말 그대로 터미널 상에서 접근할 폴더이름일 뿐, 생성하고자 하는 블로그의 이름이 되진 않는다. (예시는 blog로 하였다.)
폴더를 만들었으면 $ cd blog &amp;amp;&amp;amp; ls 를 입력해 생성된 폴더의 내부를 확인한다.
-&amp;gt; 정상적으로 생성이 되었으면 archtypes, assets, config.toml 등 여러 파일과 폴더들이 생성된 것을 확인할 수 있다.
테스트 $ hugo server 명령어를 입력하고 localhost:1313 을 크롬, 파이어폭스등 웹브라우저 주소창에 입력해 생성된 사이트를 확인해보자.</description>
    </item>
    
    <item>
      <title>Getting Started Hugo [1] - 설치 및 환경설정</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_1_install/</link>
      <pubDate>Sat, 28 Dec 2019 14:48:40 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_1_install/</guid>
      <description>Hugo? Hugo는 웹사이트를 간편하게 만들어주는 정적 사이트 생성기 (static site generator)중 하나이며, 비슷한 생성기들 중 대표적인 예로는 Jekyll (지킬이라고 부른다)이 있다. 처음에는 지킬을 사용하여 블로그를 만들려했다가 단순하게 뭔가 Jekyll보다는 Hugo의 네이밍이 마음에 들어서 Hugo를 선택하여 블로그를 개설하게 되었다.
Install 설치방법은 install hugo에 각 OS별로 설치를 하는 방법이 잘 안내되어 있다.
OSX brew install hugo Debian, Ubuntu sudo apt-get install hugo package installer를 이용하는 방법외에는 Release 다운로드 사이트에서 직접 다운로드하여 설치하는 방법도 있다.</description>
    </item>
    
    <item>
      <title>C로 구현하는 자료구조 - Queue</title>
      <link>https://ralpioxxcs.github.io/post/cs/queue/</link>
      <pubDate>Wed, 18 Sep 2019 21:59:22 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cs/queue/</guid>
      <description>선입선출(先入先出, First In First Out; FIFO)의 자료구조로써, 데이터가 나가는 위치, 큐의 첫번째 위치를 Front 라고 하고 데이터가 삽입되는 지점, 큐의 마지막 데이터의 한 칸 다음 위치를 Rear 혹은 Back이라고 한다 큐에 데이터를 삽입하는 과정을 Enqueue, 빼는 과정을 Dequeue라고 한다. 선입선출 형태이므로 주로 대기열, 줄서기 같은곳에 쓰이는 구조이다.
선형 큐 (Linear Queue) 예를들어 사이즈가 5인 큐가 있다고 하자. 초기에는 Front와 Rear 둘다 0을 가리키고 있는상태이다. 데이터를 하나 삽입하면 Front값을 그대로 Rear값은 하나 증가한다 (1번방 가리키고있는상태) 그 다음 방금 넣었던 데이터를 삭제하면 Front값이 하나 증가하여 1번방을 가리키고, 이 상태는 큐가 비었다는것을 뜻 한다.</description>
    </item>
    
    <item>
      <title>C로 구현하는 자료구조 - Binary Tree</title>
      <link>https://ralpioxxcs.github.io/post/cs/binary_tree/</link>
      <pubDate>Wed, 18 Sep 2019 13:54:02 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cs/binary_tree/</guid>
      <description>&amp;ldquo;트리 (Tree)&amp;rdquo; 자료구조란 나무를 뒤집은 모습으로 계층구조를 표현하기에 적합한 자료구조이다. 맨 위의 노드가 &amp;ldquo;루트노드 (Root Node)&amp;rdquo; 라고 하며 이 노드 아래에 있는 노드들은 다시 트리 구조가 된다. 이런 구조를 &amp;ldquo;서브 트리 (Sub Tree)&amp;ldquo;라고 한다. 또한, 임의의 노드의 조상과 자손을 지칭 할 수 있는데, 임의의 노드 바로 위에 있는 노드를 &amp;ldquo;부모 노드 (Parent Node)&amp;rdquo; 라고 하고 그 바로 아래 노드들을 &amp;ldquo;자식 노드 (Children Node)&amp;ldquo;라 한다.
이런 트리구조에서 파생된 자료구조를 이진트리 (Binary Tree) 라고 부르는데, 이진트리는 모든 노드들의 자식 노드가 두 개 이하인 트리를 의미한다.</description>
    </item>
    
    <item>
      <title>C로 구현하는 자료구조 - Graph</title>
      <link>https://ralpioxxcs.github.io/post/cs/graph_matrix/</link>
      <pubDate>Fri, 13 Sep 2019 13:54:02 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cs/graph_matrix/</guid>
      <description>Graph 그래프 자료구조를 나타내는 방법으로 두 가지가 있다. 하나는 인접 행렬 (adjacent Matrix) 이고 하나는 인접 리스트 (adjacent List)법이있다. 이번 글에서는 인접행렬로 그래프를 나타내는 방법을 알아보겠다. 인접행렬법은 배열로 그래프를 나타내는 것이므로 밀집그래프 (완전그래프)를 표현하는데 적절하다. 2차원 배열 특성상 한번에 메모리를 잡아햐 하기때문에 빈 공간이 생기면 메모리 낭비가 생기므로 밀집그래프를 표현하는데 있어 좋은 방법이다.
(※무방향 그래프를 표현 시 대칭성을 고려해야 한다.)
Implementaion Define extern int check[]; /*---------------------------------------------- GraphMatrix 처리 구조체 및 활용 함수 -----------------------------------------------*/ typedef struct { int graph[MAX_VERTEX][MAX_VERTEX]; /* 인접 행렬법 표기 배열 - 2차원 배열 */ int vertexCnt; /* 정점 개수 */ int edgeCnt; /* 간선 개수 */ }GraphMatrix; void initGraph(GraphMatrix *gm, char *fileName); /*데이터파일에서 그래프의 정점과 간선 정보를 입력 받아 그래프를 초기화하는 함수 */ void outputGraph(GraphMatrix *gm); /* 그래프내의 정점과 간선의 관계를 인접 행렬 형태로 출력 함 */ void DFS_Matrix(GraphMatrix *gm); /* 여러 개의 연결 요소로 구성된 그래프를 깊이 우선 탐색하기 위한 함수(재귀판) - DFS_recursive()함수를 호출하여 처리(이 함수 자체는 재귀하지 않음) */ void DFS_recursive(GraphMatrix *gm, int vNum); /* 연결되어있는 하나의 그래트내의 모든 정점을 재귀호출기법으로 방문하는 함수 */ void visit(int vNum); /* 방문한 정점의 처리 */ void nrDFS_Matrix(GraphMatrix *gm); /* 여러 개의 연결 요소로 구성된 그래프를 깊이 우선 탐색하기 위한 함수(비 재귀판) */ void BFS_Matrix(GraphMatrix *gm); /* 여러 개의 연결 요소로 구성된 그래프를 너비 우선 탐색하기 위한 함수(비 재귀판) */ int countGraphComponents(GraphMatrix *gm); /* 인접 행렬법으로 표기되 그래프 내의 연결 요소별로 정점들을 출력하고 연결 요소의 개수를 리턴하는 함수 */ extern 전역 변수로 방문처리를 확인 할 1차원 배열을 하나 선언해준다.</description>
    </item>
    
    <item>
      <title>C로 구현하는 자료구조 - Linked List</title>
      <link>https://ralpioxxcs.github.io/post/cs/linked_list/</link>
      <pubDate>Fri, 13 Sep 2019 13:54:02 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cs/linked_list/</guid>
      <description>자료구조의 일종인 링크드리스트는 각 노드당 데이터를 저장하는 데이터필드 영역과 다음 노드를 가리키는 노드 포인터 영역으로 구성된 자료구조이다. 비슷한 방식으로 배열이 있지만 배열은 처음부터 메모리를 할당하고 시작하기 때문에, 링크드리스트에 비해 데이터의 삽입이나 삭제가 어렵다. 반면, 링크드리스트는 노드를 데이터를 삽입할 때마다 메모리를 할당하고 데이터를 이어주는 형식이라 배열에 비해 메모리 낭비가 덜 하다는 장점이 있다.
Implementation structure typedef struct _node Node; // 구조체 노드 형명재지정 struct _node{ // 데이터를 보관할 노드(자기참조 구조체) Node *prev; // 앞 노드를 가리키는 멤버 DataType data; // 데이터 저장 멤버 Node *next; // 뒷 노드를 가리키는 멤버 }; typedef struct _linkedList{ // 리스트 관리 구조체 Node *head; // 헤드포인터 (헤드노드 가리킴) Node *cur; // 특정 작업 시 노드를 가리키기 위한 포인터 Node *tail; // 테일포인터 (테일노드 가리킴) int length; // 실제 데이터노드의 갯수 }LinkedList; LinkedList 구조체는 리스트 관리 구조체로서,</description>
    </item>
    
    <item>
      <title>C로 구현하는 자료구조 - stack</title>
      <link>https://ralpioxxcs.github.io/post/cs/stack/</link>
      <pubDate>Fri, 13 Sep 2019 13:54:02 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cs/stack/</guid>
      <description>후입선출(Last In First Out; LIFO)의 특성을 갖는 자료구조로, 데이터를 쌓아올리는(stack)의 형태를 갖는다.
push: 데이터를 넣는 작업 pop: 데이터를 꺼내는 작업 Implementation 스택은 배열(array)와 연결리스트(linked list)로 구현할 수 있는데, 여기서는 연결리스트를 이용해서 스택을 구현할 것이다.
structure typedef struct node { void* data; struct node *next; } node; typedef struct stack { int size; node *head; } stack; 동적으로 할당할 data와 다음 노드를 가리킬 next 포인터로 하나의 element 형태를 갖는다.
initialize stack init_stack() { stack st; st.</description>
    </item>
    
    
    
  </channel>
</rss>
