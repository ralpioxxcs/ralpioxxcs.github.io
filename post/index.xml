<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on My Devlog</title>
    
    
    
    <link>https://ralpioxxcs.github.io/post/</link>
    <description>Recent content in Post on My Devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Sep 2021 20:32:39 +0900</lastBuildDate>
    
	<atom:link href="https://ralpioxxcs.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>쉘 스크립트 삽질</title>
      <link>https://ralpioxxcs.github.io/post/etc/double_vs_single_quote/</link>
      <pubDate>Mon, 27 Sep 2021 20:32:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/double_vs_single_quote/</guid>
      <description>
        
          
          
          
        
        
        
          배경 최근에 간단한 쉘 스크립트 하나를 짜면서 겪은 문제가 하나 있다. ssh로 연결된 특정 보드의 이더넷 네트워크 인터페이스의 설정을 변경해주는 작업이었다. 적용할 보드가 한두개가 아니라서 해당 작업을 간편하게 하기위해서 HOST(노트북)에서 해당 작업을 수행하는 스크립트를 실행시키면 ssh를 통해 보드내 설정을 바꿔주도록 했다. 딱히 어려울것 없는 작업이라 sshpass, scp, ssh, sed 명령어 조합을 사용하였다.
로컬 터미널에서 위의 명령어들을 쓰면서 잘 바뀌는것을 확인했고 그 로직을 그대로 쉘 스크립트를 작성하였다&amp;hellip; 하지만 문제는 로컬 터미널에서만 테스트 한 점이었다.
          
        
        </description>
    </item>
    
    <item>
      <title>WSL2 메모리 사용량 조절</title>
      <link>https://ralpioxxcs.github.io/post/wslconfig/</link>
      <pubDate>Sun, 21 Feb 2021 23:16:05 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/wslconfig/</guid>
      <description>
        
          
          
          
        
        
        
          WSL 메모리 사용량 wsl2을 사용하다가 메모리 사용량을 체크 해보면 Vmmem 이라는 놈이 메모리를 엄청 잡아먹고 있는걸 볼 수있다. 마소 공식 document에 따르면 총 메모리의 50퍼센트 혹은 특정 빌드 전 단계에서는 총 메모리의 무려 80퍼센트를 사용한다고 한다.
 50% of total memory on Windows or 8GB, whichever is less; on builds before 20175: 80% of your total memory on Windows
 config 파일 작성 다행히도 .wslconfig라는 파일을 사용해서 WSL 설정을 바꿀 수 있다.
          
        
        </description>
    </item>
    
    <item>
      <title>push_back vs. emplace_back</title>
      <link>https://ralpioxxcs.github.io/post/cpp/stdvector/</link>
      <pubDate>Sun, 20 Dec 2020 19:34:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cpp/stdvector/</guid>
      <description>
        
          
          
          
        
        
        
          push_back 과 emplace_back 둘 다 실질적으로 수행하는 일은 &amp;ldquo;컨테이너의 끝에 요소를 추가하는것&amp;rdquo; 로 동일하다. 하지만 두 함수를 memory allocation 관점에서 보면 emplace_back 이 훨씬 효율적으로 작동한다.
push_back 이 호출될 때 객체 관점에서 순서는 다음과 같다.
 Stack 영역에 생성자를 호출 하면서 임시객체(temporary object)가 할당 된다. 복사 생성자(copy constructor) 혹은 이동 생성자 통해 함수 안에서 또 하나의 temporay object를 생성한다. 생성된 temporary object를 벡터 컨테이너의 끝에 추가한다. 1번의 임시객체가 소멸된다.  이렇게, push_back 함수는 &amp;ldquo;객체&amp;rdquo; 자체를 집어넣는 방식으로, R-value의 임시객체가 필요하다.
          
        
        </description>
    </item>
    
    <item>
      <title>Vim 사용하기 #3 - C/C&#43;&#43; 개발환경 세팅</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_setting_3/</link>
      <pubDate>Fri, 11 Dec 2020 20:13:41 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_setting_3/</guid>
      <description>
        
          
          
          
        
        
        
          이번에는 neovim에서 coc.nvim를 이용하여 C/C++ 개발환경을 세팅하는 방법에 대해서 알아보겠다.
coc.nvim은 Language Server Protocol인 LSP를 지원하는 코드 auto-completion 패키지인데 이전에는 ycm을 사용하다가 너무 무겁기도 하고 개인적으로 환경설정 부분에 불편함 점이 있어 coc.nvim을 사용하게 되었다.
coc.nvim 설치 vim-plug 설정부분에 아래를 추가해준뒤, :PlugInstall을 해준다.
Plug &amp;#39;neoclide/coc.nvim&amp;#39;, {&amp;#39;tag&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;do&amp;#39;: &amp;#39;./install.sh&amp;#39;} 참고로, node.js 10.12 버전 이상이 설치되어있어야 한다. node.js가 설치되어있지 않다면 여기를 참고하여 다운로드 및 설치를 진행해주자.
 cpp language server 설치 이곳을 보면 C/C++ language server에 맞는 configuration example을 제공한다.
          
        
        </description>
    </item>
    
    <item>
      <title>multitail을 이용한 로그 모니터링</title>
      <link>https://ralpioxxcs.github.io/post/etc/log_monitoring/</link>
      <pubDate>Fri, 09 Oct 2020 20:56:41 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/log_monitoring/</guid>
      <description>
        
          
          
          
        
        
        
          보통 로그파일 실시간으로 보고싶을때 tail 명령어를 사용한다. 하지만 여러 로그를 보고싶을때는 tmux등 화면 분할을 해서 봐야하는데 이 방법은 귀찮다. 이럴때 multitail을 사용하면 간단하게 여러 로그를 모니터링할수 있다.
설치 apt install multitail을 입력하여 간단하게 설치한다. 맥 유저라면 brew install multitai을 쓴다.
사용법   1개의 파일 모니터링
multitail [filename]
  2개의 파일 모니터링 (가로로 분할)
multitail [filename] [filename]    2개의 파일 모니터링 (세로로 분할)
multitail -s 2 [filename] [filename]    colorscheme 설정 multitail은 자체 config파일을 통해 로그파일 highlighting을 지원한다.
          
        
        </description>
    </item>
    
    <item>
      <title>SSH 서버 설정</title>
      <link>https://ralpioxxcs.github.io/post/etc/sshd_config/</link>
      <pubDate>Tue, 29 Sep 2020 19:54:24 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/sshd_config/</guid>
      <description>
        
          
          
          
        
        
        
          SSH  시큐어 셸(Secure SHell, SSH)은 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해 주는 응용 프로그램 또는 그 프로토콜을 가리킨다. 기존의 rsh, rlogin, 텔넷 등을 대체하기 위해 설계되었으며, 강력한 인증 방법 및 안전하지 못한 네트워크에서 안전하게 통신을 할 수 있는 기능을 제공한다. -Wiki
 리눅스 개발환경을 구성하다보면 거의 필수적으로 사용하게 되는 ssh(secure shell) 을 구성하는 방법을 알아보자.
  SSH 서버 설치 ubuntu 및 osx 에는 기본적으로 ssh client는 설치돼있다.
          
        
        </description>
    </item>
    
    <item>
      <title>Vim 사용하기 #2 - Plugin</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_setting_2/</link>
      <pubDate>Fri, 07 Aug 2020 14:26:52 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_setting_2/</guid>
      <description>
        
          
          
          
        
        
        
          Vim Plugins vim을 쓰는 가장 큰 이유중 하나는 바로 이 Plugin에 있지않나 싶다. 설치도 비교적 간편하며, 확장성이 뛰어나서 플러그인을 사용하면서 불편한 부분들을 설정파일을 통해 입맛에 맞게 바꿀 수 있다는 점이 매력적이다.
지금도 유용하게 사용하는 vim 플러그인들에 대한 소개와 설치방법 및 사용법에 대해 간단히 알아보겠다.
 플러그인 매니저 설치 vim에서 Plugin들을 설치, 관리해주는 도구들이 여러개 있는데 (Vundle, Pathogen) 그 중에서 나는 junegunn님이 만드신 vim-plug를 사용중이다.
현재 neovim을 사용중이므로 설치 방법은 아래와 같다.
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu LLVM Package 설치</title>
      <link>https://ralpioxxcs.github.io/post/etc/llvm_install/</link>
      <pubDate>Sat, 04 Jul 2020 13:53:55 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/llvm_install/</guid>
      <description>
        
          
          
          
        
        
        
          이 링크 로 들어가면 아래 사진과 같은 화면이 나오며 각 Release 버전에 맞는 llvm 패키지들을 다운로드 받을 수 있다.  llvm, clang, lld, lldb등 각 패키지에 대한 설명은 여기에 잘 나와있다.
아무튼 위의 사진에 나온것처럼 설치방법으로는 크게 4가지로 나눌 수 있다.
 소스코드 다운로드 후 직접 빌드 미리 빌드된 바이너리 설치 Automatic Installation Script apt install 커맨드 사용하여 설치  이 포스팅에서는 3번째인 Automatic installation script를 이용하여 설치하는 방법을 다루려고 한다.
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu Clang 컴파일러 설정</title>
      <link>https://ralpioxxcs.github.io/post/etc/change_compiler/</link>
      <pubDate>Sat, 04 Jul 2020 13:32:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/change_compiler/</guid>
      <description>
        
          
          
          
        
        
        
          ubuntu 환경에서 c,cxx 기본 컴파일러는 /usr/bin/cc , /usr/bin/c++에 심볼릭 링크로 지정되어있는데 기본적으로는 gcc와 **g++**로 설정되어있다.
빌드시에 컴파일러 경로를 직접 입력해주는 방법도 있지만, /usr/bin/c++의 심볼릭 링크를 변경해줌으로써 고정을 시킬수도 있다.
이 과정전에 반드시 clang이 설치되어야 한다. clang을 설치하는 방법은 여기에 포스팅해 두었다.
환경변수 변경 export CC=/usr/bin/clang export CXX=/usr/bin/clang++ 위의 명령어로 환경변수를 바꿔주는 방법으로 컴파일러를 바꿔줄 수 있다. 영구적으로 지정시키고 싶다면 ~/.bashrc에 추가하는 방법으로 환경변수를 설정해주하면 된다. 지정 커맨드 이용 # c++ compiler sudo update-alternatives --config c++ # c compiler sudo update-alternatives --config cc 위의 커맨드를 입력하고 아래처럼 결과 창이 나오면 원하는 번호를 입력하여 c와 c++에 지정된 컴파일러 경로를 바꿔준다.
          
        
        </description>
    </item>
    
    <item>
      <title>Vim 사용하기 #1 - Install</title>
      <link>https://ralpioxxcs.github.io/post/vim/vim_setting_1/</link>
      <pubDate>Fri, 19 Jun 2020 21:06:39 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/vim/vim_setting_1/</guid>
      <description>
        
          
          
          
        
        
        
          나에게 vim이란 라즈베리파이 같은 리소스나 메모리등 작업 환경이 열악하거나 불가피한 사유로 인터넷을 사용하지 못하는 상황에서 가끔 쓰던 편집기였다.
hjkl로 움직이고, visual mode, normal mode 등등 처음에는 진입장벽이 높게 느껴져서 손이 안가다가, 마우스를 쓰는게 너무 귀찮아서 일주일만 마음먹고 연습(?)을 했더니 이제는 vim이 없으면 코딩을 할 맛이 안나게 될 정도로 익숙해져버렸다.
vim으로 갈아타게 된 결정적인 계기는 VSCode에서 지원하는 c/cpp extension이 메모리를 너무 잡아먹어서이다.. (물론 vim도 이것저것 많이 깔면 느려지겠지만)
          
        
        </description>
    </item>
    
    <item>
      <title>gdb에서 imagewatch 사용하기</title>
      <link>https://ralpioxxcs.github.io/post/etc/gdb_imagewatch_1/</link>
      <pubDate>Sat, 25 Apr 2020 15:21:05 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/etc/gdb_imagewatch_1/</guid>
      <description>
        
          
          
          
        
        
        
          OpenCV 라이브러리를 사용해본 사람이라면 한번쯤 ImageWatch 플러그인을 사용해봤을 것이다.
디버거에서 확인하기 힘든 Mat 데이터내 index value등 간편한 인터페이스를 통해 직관적으로 확인이 가능한 유용한 툴이다. 하지만, Visual Studio에서만 사용이 가능한 플러그인이라, 리눅스 환경에서 개발을 하는 나에게는 아쉬움이 많았다.
그러다가 github에서 imagewatch와 비슷하게 간편한 인터페이스로 index값을 확인할 수 있는 프로그램을 발견하게 되었고, 지금까지 아주 유용하게 사용하고 있다.
   설치조건 gdb imagewatch는 아래의 프로그램들의 설치를 필요로 한다.
 OpenGL 2.
          
        
        </description>
    </item>
    
    <item>
      <title>CMake Part4 - 색상 지정</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_4/</link>
      <pubDate>Sat, 01 Feb 2020 15:32:40 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_4/</guid>
      <description>
        
          
          
          
        
        
        
          set 변수를 사용해 Shell에 출력되는 문자들의 색상을 지정할 수 있다.
if(NOT WIN32) string(ASCII 27 Esc) set(ColourReset &amp;#34;${Esc}[m&amp;#34;) set(ColourBold &amp;#34;${Esc}[1m&amp;#34;) set(Red &amp;#34;${Esc}[31m&amp;#34;) set(Green &amp;#34;${Esc}[32m&amp;#34;) set(Yellow &amp;#34;${Esc}]33m&amp;#34;) set(Blue &amp;#34;${Esc}]34&amp;#34;) set(Magenta &amp;#34;${Esc}]35m&amp;#34;) set(Cyan &amp;#34;${Esc}]36m&amp;#34;) set(White &amp;#34;${Esc}[37m&amp;#34;) set(BoldRed &amp;#34;${Esc}[1;31m&amp;#34;) set(BoldGreen &amp;#34;${Esc}[1;32m&amp;#34;) set(BoldYellow &amp;#34;${Esc}[1;33m&amp;#34;) set(BoldBlue &amp;#34;${Esc}[1;34m&amp;#34;) set(BoldMagenta &amp;#34;${Esc}[1;35m&amp;#34;) set(BoldCyan &amp;#34;${Esc}[1;36m&amp;#34;) set(BoldWhite &amp;#34;${Esc}[1;37m&amp;#34;)endif()위의 내용을 .cmkae파일로 만들어 include하거나 CmakeLists.txt 의 상단에 삽입한다.
Example message(&amp;#34; &amp;#34;)message( &amp;#34;${BoldGreen}\t\t\t[ BUILD SUMMARY ] ${White}&amp;#34; )message( &amp;#34;${BoldWhite}------------------------------------------------------------------------${ColourReset}&amp;#34; 
          
        
        </description>
    </item>
    
    <item>
      <title>CMake Part3 - 프로젝트 구성</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_3/</link>
      <pubDate>Thu, 30 Jan 2020 14:38:36 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_3/</guid>
      <description>
        
          
          
          
        
        
        
          어떤 프로젝트를 cmake를 이용하여 관리 및 빌드하고자 할때, CMakeLists.txt를작성 시 자주 사용되는 cmake 기본 명령어들이 있다.
(Root) |- CMakeLists.txt |- README.md |- [src] | |- CMakeListst.txt | |- foo.cpp | |- poo.cpp | |- main.cpp |- [include] | |- foo.h | |- poo.h |- [cmake] | |- options.cmake 이런 구조를 가지는 프로젝트 폴더가 있다고 할 때, CMakeLists.txt는 아래와 같다.  # [/CMakeListst.txt] cmake_minimum_required(VERSION 3.3) project(foo CXX) # -&amp;gt; &amp;#39;foo&amp;#39;라는 project를 정의한다.
          
        
        </description>
    </item>
    
    <item>
      <title>CMake Part2 - Commands &amp; Vars</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_2/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_2/</guid>
      <description>
        
          
          
          
        
        
        
          1. project 초기 설정 CMAKE_MINIMUM_REQUIRED [용법]
cmake_minimum_required(VERSION major.minor[.patch[.tweak]][FATAL_ERROR])만약 어떤 오픈소스 라이브러리가 cmake 3.0 버전 이상으로 작성 되었고, 현재 나의 빌드환경은 cmake 2.8버전 미만이라면 빌드 시, 다음의 에러가 출력된다 -&amp;gt;
CMake 3.0 or higher is required. You are running version 2.8.12.2
이 커맨드는 반드시 CMakeListst.txt 작성시 맨 처음에 선언 해 놓아야 정상적인 버전 호환 에러를 출력할 수 있다.
  # Bad example project(foo) cmake_minimum_required(VERSION 3.0) message(&amp;#34;Using CMake version ${CMAKE_VERSION}&amp;#34;)  PROJECT [용법]
          
        
        </description>
    </item>
    
    <item>
      <title>CMake Part1 - Overview</title>
      <link>https://ralpioxxcs.github.io/post/cmake/cmake_1/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/cmake/cmake_1/</guid>
      <description>
        
          
          
          
        
        
        
          CMake? cmake란 cross platform 기반의 프로젝트 전체 빌드 프로세스를 관리해주는 유용한 툴이다. 직접 빌드를 수행하지는 않지만 지정된 OS에 맞는 Make파일 혹은 **솔루션(sln)**파일의 생성을 도와주어 소스코드 빌드를 편리하게 해준다.
Cmake의 장점  (root) |- foo.cpp |- CMakeLists.txt foo.cpp 라는 소스코드가 하나 있다고 가정하자. 이 소스코드를 각각의 다른 OS에서 빌드할 때, 윈도우즈라면 Visual Studio를, OSX라면 Xcode, Linux라면 Makefile을 이용할것이다. Cmake는 이런 귀찮은 과정을 CMakeLists.txt라는 프로젝트를 정의하는 파일을 하나 만듦으로써, 각 OS에 맞는 Build tool을 파악해 build command만 입력하면 될수 있도록 해준다.
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [4] - Shortcodes</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_4_shortcodes/</link>
      <pubDate>Mon, 30 Dec 2019 18:07:57 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_4_shortcodes/</guid>
      <description>
        
          
          
          
        
        
        
          Shortcode Hugo는 다양한 shortcode 플러그인들을 제공하고 있다. markdown이 제공하는 편리한 문법들로도 충분하지만, code snippet이나 유튜브 영상등을 추가할 때 유용하게 사용할 수 있다.
 　Shotcode 사용하기 shortcode는 { {&amp;lt; shortcodename parameters &amp;gt;} } 의 용법으로 간단하게 사용할 수 있다.
 shortcodename : 사용할 shortcode의 이름 (ex. highlight, figure..) parameter : 사용할 shortcode가 어떻게 정의되었느냐에 따라 달라짐   Built-in Shortcodes figure figure는 마크다운이 제공하는 이미지관련 문법보다 더 다양한 기능을 제공한다. parameter를 통해 첨부할 이미지의 title, caption, link등을 지정할 수 있다.
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [3] - Front Matter</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_3_frontmatter/</link>
      <pubDate>Mon, 30 Dec 2019 16:09:14 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_3_frontmatter/</guid>
      <description>
        
          
          
          
        
        
        
          Front Matter? front matter란 작성하고자 하는 컨텐츠(파일)의 제목, 날짜, 작성자 등의 기본적인 속성들을 나타내는 meta-data 형식이다.  Formats Hugo는 다음 3가지의 마크업 언어를 지원한다.
 TOML : +++ YAML : --- JSON : {, }
을 이용해 front matter의 시작과 끝을 지정한다.  예를들어, a.md라는 새로운 파일을 만들었다면 --- title: &amp;#34;this is title!&amp;#34; date: 2019-12-27T13:39:03+09:00 draft: true --- this is the markdown file 이렇게 파일의 시작 부분에 front matter를 설정해주면,
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [2] - Page Bundle</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_2_page/</link>
      <pubDate>Mon, 30 Dec 2019 15:21:24 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_2_page/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo에서는 Page Bundles이라는 개념을 사용해 컨텐츠를 관리한다. Page Bundles에는 2가지 종류가 있다.
 Leaf Bundle Branch Bundle   Left Bundle left bundle은 단독 페이지를 구성하는데 사용되고, index.md 파일을 포함하는 폴더로 구성된다.
3 of Leaf Bundle Example content/ ├── project │ ├── index.md ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ | ├── image1.png │ | └── index.md │ └── study │ ├── first.md │ └── second.
          
        
        </description>
    </item>
    
    <item>
      <title>Hugo Content Management [1] - Contents Path</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_1_contents_path/</link>
      <pubDate>Mon, 30 Dec 2019 15:07:19 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_content_management_1_contents_path/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo가 어떻게 각각에 컨텐츠에 접근하고, 폴더를 조직화하여 블로그를 구성하는지 알아보자.
컨텐츠 구성 (root) └── content └── project | └── index.md // &amp;lt;- https://example.com/project/ ├── posts | ├── firstpost.md // &amp;lt;- https://example.com/posts/firstpost/ | └── secondpost.md // &amp;lt;- https://example.com/posts/secondpost/ └── study ├── first.md // &amp;lt;- https://example.com/study/first/ └── second.md // &amp;lt;- https://example.com/study/second/ 위 처럼 각각 project, posts, study 총 3개의 카테고리가 있다고 가정할 때, Hugo는 section, slug, path, url의 변수들을 이용해 컨텐츠를 관리한다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [4] - 레포지토리 연동 및 웹 호스팅</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_4_remote_repo_link/</link>
      <pubDate>Sun, 29 Dec 2019 15:02:51 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_4_remote_repo_link/</guid>
      <description>
        
          
          
          
        
        
        
          나만의 블로그를 구축하는데 성공하였다. 이제 로컬에 저장돼있는 hugo 사이트를 github repository와 연동하여 실제로 주소를 갖는 블로그를 만들어보자.
 Step 1. github repository 생성 github에 로그인하여 총 2개의 repository를 생성한다.
 blog 폴더 자체를 저장할 repository hugo로 빌드된 결과파일들을 저장할 repository
두번째 repository의 이름은 [github계정명].github.io의 형식으로 만들어야 한다.   remote repository 연동  c://hugo/blog 경로에서 $ git init .으로 로컬 repository를 생성한다. $ git remote add origin [첫번째 repository url]를 입력한다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [3] - 디렉터리 구조</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_3_directory/</link>
      <pubDate>Sun, 29 Dec 2019 14:57:28 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_3_directory/</guid>
      <description>
        
          
          
          
        
        
        
          명령창에 $ hugo new site를 입력하면 아래의 구조를 가진 폴더가 하나 생성되는것을 보았을것이다. 각각의 폴더의 역할은 다음과 같다.
( root ) ├─ archetypes ├─ content ├─ data ├─ layouts ├─ static ├─ themes ├─ config.toml  archetypes $ hugo new 커맨드를 이용해 새로운 contents 파일을 만들때, 이 폴더내의 default.md 의 front matter 형태를 갖는 content를 자동으로 초기화 하여 만들어준다. 많은양의 content를 만들 때 유용하게 사용될수 있고, front matter field를 직접 수정하여 하나의 archtypes로 만들 수 있다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [2] - 블로그 생성</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_2_quick_start/</link>
      <pubDate>Sat, 28 Dec 2019 15:34:07 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_2_quick_start/</guid>
      <description>
        
          
          
          
        
        
        
          Let&amp;rsquo;s create own blog 　Step 1. 블로그 폴더 생성   c://hugo 의 경로에서 $ hugo new site [폴더이름] 을 입력한다. 여기서 폴더이름은 말 그대로 터미널 상에서 접근할 폴더이름일 뿐, 생성하고자 하는 블로그의 이름이 되진 않는다. (예시는 blog로 하였다.)
  폴더를 만들었으면 $ cd blog &amp;amp;&amp;amp; ls  를 입력해 생성된 폴더의 내부를 확인한다.
-&amp;gt; 정상적으로 생성이 되었으면 archtypes, assets, config.toml 등 여러 파일과 폴더들이 생성된 것을 확인할 수 있다.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started Hugo [1] - 설치 및 환경설정</title>
      <link>https://ralpioxxcs.github.io/post/hugo/hugo_start_1_install/</link>
      <pubDate>Sat, 28 Dec 2019 14:48:40 +0900</pubDate>
      
      <guid>https://ralpioxxcs.github.io/post/hugo/hugo_start_1_install/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo? Hugo는 웹사이트를 간편하게 만들어주는 정적 사이트 생성기 (static site generator)중 하나이며, 비슷한 생성기들 중 대표적인 예로는 Jekyll (지킬이라고 부른다)이 있다. 처음에는 지킬을 사용하여 블로그를 만들려했다가 단순하게 뭔가 Jekyll보다는 Hugo의 네이밍이 마음에 들어서 Hugo를 선택하여 블로그를 개설하게 되었다.
Install 설치방법은 install hugo에 각 OS별로 설치를 하는 방법이 잘 안내되어 있다.
OSX brew install hugo Debian, Ubuntu sudo apt-get install hugo package installer를 이용하는 방법외에는 Release 다운로드 사이트에서 직접 다운로드하여 설치하는 방법도 있다.
          
        
        </description>
    </item>
    
  </channel>
</rss>